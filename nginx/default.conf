server {
    listen 80;
    listen 443 ssl http2;
    server_name domain.com;
    index index.php index.html index.htm default.php default.htm default.html;
    root /www/sites/domain.com/index/dist/;

    location ^~ /.well-known/acme-challenge {
        allow all;
        root /usr/share/nginx/html;
    }

    #SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则
    #error_page 404/404.html;
    #HTTP_TO_HTTPS_START
    if ($server_port !~ 443) {
        rewrite ^(/.*)$ https://$host$1 permanent;
    }
    #HTTP_TO_HTTPS_END
    ssl_certificate /www/sites/domain.com/ssl/fullchain.pem;
    ssl_certificate_key /www/sites/domain.com/ssl/privkey.pem;
    ssl_protocols TLSv1.3 TLSv1.2 TLSv1.1 TLSv1;
    ssl_ciphers EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    add_header Strict-Transport-Security "max-age=31536000";
    error_page 497 https://$host$request_uri;


    #SSL-END
    #ERROR-PAGE-START  错误页配置，可以注释、删除或修改
    #error_page 404 /404.html;
    #error_page 502 /502.html;
    #ERROR-PAGE-END

    # 避免访问出现 404 错误
    location / {
      try_files $uri $uri @router;
      index index.html;
    }

    location @router {
      rewrite ^.*$ /index.html last;
    }

    # 后端地址
    location /api/ {
      proxy_pass http://127.0.0.1:9999/;
      client_max_body_size 1024m;
      client_body_buffer_size 128k;
      client_body_timeout 900s;
      proxy_connect_timeout 120s;
      proxy_read_timeout  900s;
      proxy_send_timeout 900s;
      proxy_pass_header Authorization;
      proxy_set_header  Host $host;
      proxy_set_header  Upgrade $http_upgrade;
      proxy_set_header  Connection $connection_upgrade;
      proxy_set_header  X-NginX-Proxy true;
      proxy_set_header  X-Real-IP $remote_addr;
      proxy_set_header  X-Forwarded-Proto $scheme;
      proxy_set_header  X-Forwarded-For $remote_addr;
      proxy_hide_header X-Powered-By;
      proxy_redirect off;
      proxy_buffers 32 32k;
    }

    # 禁止访问的文件或目录
    location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md) {
      return 404;
    }

    access_log /www/sites/domain.com/log/access.log;
    error_log /www/sites/domain.com/log/error.log;

    gzip  on;
    gzip_min_length 1k;      #设置允许压缩的页面最小字节(从header头的Content-Length中获取) ，当返回内容大于此值时才会使用gzip进行压缩,以K为单位,当值为0时，所有页面都进行压缩。建议大于1k
    gzip_buffers 4 16k;      #设置gzip申请内存的大小,其作用是按块大小的倍数申请内存空间,param2:int(k) 后面单位是k。这里设置以16k为单位,按照原始数据大小以16k为单位的4倍申请内存
    gzip_http_version 1.1;   #识别http协议的版本,早起浏览器可能不支持gzip自解压,用户会看到乱码
    gzip_comp_level 4;       #设置gzip压缩等级，等级越底压缩速度越快文件压缩比越小，反之速度越慢文件压缩比越大；等级1-9，最小的压缩最快 但是消耗cpu
    gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png image/x-icon font/ttf font/opentype font/x-woff image/svg+xml; #压缩文件类型,缺啥补啥; #设置需要压缩的MIME类型,非设置值不进行压缩，即匹配压缩类型
    gzip_vary on;            #启用应答头"Vary: Accept-Encoding"
    gzip_proxied off;

    # html js css 不进行缓存
    location ~* \.(html|htm|js|css)$ {
      # add_header   Cache-Control  no-store;
      expires      2h;
    }

    # 图片进行缓存
    location ~* \.(ico|gif|jpg|jpeg|png|ttf)$ {
      access_log   off;
      add_header   Cache-Control  max-age=180000;
      expires      2d;
    }

    location ~* \.(txt|xml|swf|wav)$ {
      access_log   off;
      expires      24h;
    }

    location ~* \.(eot|ttf|otf|woff|svg)$ {
      access_log   off;
      expires max;
    }
}

map $http_upgrade $connection_upgrade {
	default upgrade;
	'' close;
}
